import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, types
from chat_id import get_chat_id
from parser_script import parse_all, parser_main, download, domAll
from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.types import (

    Message,
)

bot = Bot(token="6616595798:AAFRxsUqV4Bp8hqiA1HcI_bYnpehkE25qHM")
form_router = Router()


class Form(StatesGroup):
    url = State()
    limit = State()
    media = State()
    bot_token = State()
    chat_id = State()


@form_router.message(CommandStart())
async def command_start(message: Message, state: FSMContext) -> None:
    await state.set_state(Form.url)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîé –ü–∞—Ä—Å–∏–Ω–≥", callback_data="parse"),
        ],
         [
            InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞", callback_data="payment"),
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ],
                 [
            InlineKeyboardButton(text="üì© –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="search_messages"),
        ],
                         [
            InlineKeyboardButton(text="üõ∏ –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø", callback_data="search_groups"),
        ],
                [
            InlineKeyboardButton(text="‚è© –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", callback_data="additional"),
        ],
    ])
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
   
@form_router.callback_query(lambda c: c.data == "parse")
async def parse_callback(callback: types.CallbackQuery):
        keyboard = None
        if callback.data == "parse":
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üõ† –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", callback_data="parse"),
        ],

        [
            InlineKeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
        ],
    ])
    
            await bot.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É, –æ—Ç–∫—É–¥–∞ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ï—Å–ª–∏ —É –≥—Ä—É–ø–ø—ã –Ω–µ—Ç —Å—Å—ã–ª–∫–∏, –∏–ª–∏ —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ\" ", callback.from_user.id, callback.message.message_id, reply_markup=keyboard)

        @form_router.message(Form.url)
        async def process_url(message: Message, state: FSMContext) -> None:
            url = message.text
            await state.update_data(url=url)
            await state.set_state(Form.limit)
            await message.answer("–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (0 –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ):")


        @form_router.message(Form.limit)
        async def process_limit(message: Message, state: FSMContext) -> None:
            limit = message.text
            await state.update_data(limit=limit)
            await state.set_state(Form.media)
            await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª? (yes/no):")


        @form_router.message(Form.media)
        async def process_media(message: Message, state: FSMContext) -> None:
            media = message.text
            await state.update_data(media=media)
            await state.set_state(Form.chat_id)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π id —á–∞—Ç–∞(–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")

        @form_router.message(Form.chat_id)
        async def process_chat_id(message: Message, state: FSMContext) -> None:
            chat_id = message.text
            await state.update_data(chat_id=chat_id)

            data = await state.get_data()

            url = data.get("url")
            limit = data.get("limit")
            media = data.get("media")
            chat_id = data.get("chat_id")
            
            id = get_chat_id(bot, url)
            result =  parse_all(url)

            download(url)
            domAll(url)
            parser_main(url, limit, media, chat_id)
            
            logging.info("User data: url=%s, limit=%s, media=%s, chat_id=%s", url, limit, media,  chat_id)


            await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

            await state.clear()


async def main():
    dp = Dispatcher()
    dp.include_router(form_router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
